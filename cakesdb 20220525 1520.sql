--
-- Script was generated by Devart dbForge Studio 2019 for MySQL, Version 8.2.23.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 25.05.2022 15:20:48
-- Server version: 5.7.25
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Drop function `is_admin`
--
DROP FUNCTION IF EXISTS is_admin;

--
-- Drop function `is_user`
--
DROP FUNCTION IF EXISTS is_user;

--
-- Drop procedure `add_admin`
--
DROP PROCEDURE IF EXISTS add_admin;

--
-- Drop procedure `del_user`
--
DROP PROCEDURE IF EXISTS del_user;

--
-- Drop procedure `find_orders`
--
DROP PROCEDURE IF EXISTS find_orders;

--
-- Drop view `order_info`
--
DROP VIEW IF EXISTS order_info CASCADE;

--
-- Drop procedure `add_order`
--
DROP PROCEDURE IF EXISTS add_order;

--
-- Drop table `order_prod`
--
DROP TABLE IF EXISTS order_prod;

--
-- Drop table `product`
--
DROP TABLE IF EXISTS product;

--
-- Drop table `category`
--
DROP TABLE IF EXISTS category;

--
-- Drop table `bisquit`
--
DROP TABLE IF EXISTS bisquit;

--
-- Drop table `cream`
--
DROP TABLE IF EXISTS cream;

--
-- Drop table `filling`
--
DROP TABLE IF EXISTS filling;

--
-- Drop table `form`
--
DROP TABLE IF EXISTS form;

--
-- Drop table `decoration`
--
DROP TABLE IF EXISTS decoration;

--
-- Drop table `mousse`
--
DROP TABLE IF EXISTS mousse;

--
-- Drop table `admin`
--
DROP TABLE IF EXISTS admin;

--
-- Drop procedure `count_orders`
--
DROP PROCEDURE IF EXISTS count_orders;

--
-- Drop table `order`
--
DROP TABLE IF EXISTS `order`;

--
-- Drop view `buyer_info`
--
DROP VIEW IF EXISTS buyer_info CASCADE;

--
-- Drop procedure `add_buyer`
--
DROP PROCEDURE IF EXISTS add_buyer;

--
-- Drop function `is_authed`
--
DROP FUNCTION IF EXISTS is_authed;

--
-- Drop table `buyer`
--
DROP TABLE IF EXISTS buyer;

--
-- Drop table `user`
--
DROP TABLE IF EXISTS user;

--
-- Create table `user`
--
CREATE TABLE user (
  id int(11) NOT NULL AUTO_INCREMENT,
  email varchar(255) NOT NULL,
  password varchar(255) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 7,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `email` on table `user`
--
ALTER TABLE user
ADD UNIQUE INDEX email (email);

--
-- Create table `buyer`
--
CREATE TABLE buyer (
  id int(11) NOT NULL AUTO_INCREMENT,
  user_id int(11) NOT NULL,
  name varchar(255) NOT NULL,
  phone bigint(12) UNSIGNED NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 5,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `phone` on table `buyer`
--
ALTER TABLE buyer
ADD UNIQUE INDEX phone (phone);

--
-- Create foreign key
--
ALTER TABLE buyer
ADD CONSTRAINT FK_buyer_user_id FOREIGN KEY (user_id)
REFERENCES user (id) ON DELETE CASCADE ON UPDATE NO ACTION;

DELIMITER $$

--
-- Create function `is_authed`
--
CREATE FUNCTION is_authed (e varchar(255), p bigint(12))
RETURNS int(11)
BEGIN
  DECLARE result int DEFAULT 0;
  SELECT
    COUNT(*) INTO result
  FROM user u
    LEFT JOIN buyer b
      ON u.id = b.user_id
    LEFT JOIN admin a
      ON u.id = a.user_id
  WHERE u.EMAIL = e
  OR b.phone = p
  OR a.phone = p;
  RETURN result;
END
$$

--
-- Create procedure `add_buyer`
--
CREATE PROCEDURE add_buyer (IN em varchar(255), IN pa varchar(255), IN ph bigint(12), IN na varchar(255))
BEGIN
  DECLARE i int DEFAULT 0;
  INSERT INTO user (email, password)
    VALUES (em, pa);
  SELECT
    u.id INTO i
  FROM user u
  WHERE u.EMAIL = em;
  INSERT INTO buyer (user_id, name, phone)
    VALUES (i, na, ph);
END
$$

DELIMITER ;

--
-- Create view `buyer_info`
--
CREATE
VIEW buyer_info
AS
SELECT
  `b`.`name` AS `name`,
  `b`.`phone` AS `phone`,
  `user`.`email` AS `email`
FROM (`user`
  JOIN `buyer` `b`
    ON ((`user`.`id` = `b`.`user_id`)));

--
-- Create table `order`
--
CREATE TABLE `order` (
  id int(11) NOT NULL AUTO_INCREMENT,
  number int(11) NOT NULL,
  status varchar(255) NOT NULL,
  buyer_id int(11) NOT NULL,
  order_date date NOT NULL,
  delivery_date date NOT NULL,
  price int(11) DEFAULT NULL,
  delivery varchar(255) NOT NULL,
  delivery_time time NOT NULL,
  description varchar(255) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 7,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `number` on table `order`
--
ALTER TABLE `order`
ADD UNIQUE INDEX number (number);

--
-- Create foreign key
--
ALTER TABLE `order`
ADD CONSTRAINT FK_order_buyer_id FOREIGN KEY (buyer_id)
REFERENCES buyer (id) ON DELETE NO ACTION ON UPDATE NO ACTION;

DELIMITER $$

--
-- Create procedure `count_orders`
--
CREATE PROCEDURE count_orders ()
BEGIN
  SELECT
    o.order_date AS "date",
    COUNT(o.number) AS "num"
  FROM `order` o
  GROUP BY o.order_date;
END
$$

DELIMITER ;

--
-- Create table `admin`
--
CREATE TABLE admin (
  id int(11) NOT NULL AUTO_INCREMENT,
  user_id int(11) NOT NULL,
  name varchar(255) NOT NULL,
  phone bigint(12) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `phone` on table `admin`
--
ALTER TABLE admin
ADD UNIQUE INDEX phone (phone);

--
-- Create foreign key
--
ALTER TABLE admin
ADD CONSTRAINT FK_admin_user_id FOREIGN KEY (user_id)
REFERENCES user (id) ON DELETE CASCADE ON UPDATE NO ACTION;

--
-- Create table `mousse`
--
CREATE TABLE mousse (
  id int(11) NOT NULL AUTO_INCREMENT,
  name varchar(255) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 6,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `name` on table `mousse`
--
ALTER TABLE mousse
ADD UNIQUE INDEX name (name);

--
-- Create table `decoration`
--
CREATE TABLE decoration (
  id int(11) NOT NULL AUTO_INCREMENT,
  berries varchar(255) NOT NULL,
  gingerbread smallint(4) NOT NULL,
  photo tinyint(1) NOT NULL,
  candies tinyint(1) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 7,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `UK_decoration` on table `decoration`
--
ALTER TABLE decoration
ADD UNIQUE INDEX UK_decoration (berries, gingerbread, photo, candies);

--
-- Create table `form`
--
CREATE TABLE form (
  id int(11) NOT NULL AUTO_INCREMENT,
  name varchar(50) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 5,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `name` on table `form`
--
ALTER TABLE form
ADD UNIQUE INDEX name (name);

--
-- Create table `filling`
--
CREATE TABLE filling (
  id int(11) NOT NULL AUTO_INCREMENT,
  name varchar(255) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 7,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `name` on table `filling`
--
ALTER TABLE filling
ADD UNIQUE INDEX name (name);

--
-- Create table `cream`
--
CREATE TABLE cream (
  id int(11) NOT NULL AUTO_INCREMENT,
  name varchar(50) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 8,
AVG_ROW_LENGTH = 2340,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `name` on table `cream`
--
ALTER TABLE cream
ADD UNIQUE INDEX name (name);

--
-- Create table `bisquit`
--
CREATE TABLE bisquit (
  id int(11) NOT NULL AUTO_INCREMENT,
  name varchar(255) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 9,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `name` on table `bisquit`
--
ALTER TABLE bisquit
ADD UNIQUE INDEX name (name);

--
-- Create table `category`
--
CREATE TABLE category (
  id int(11) NOT NULL AUTO_INCREMENT,
  name varchar(255) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 7,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `name` on table `category`
--
ALTER TABLE category
ADD UNIQUE INDEX name (name);

--
-- Create table `product`
--
CREATE TABLE product (
  id int(11) NOT NULL AUTO_INCREMENT,
  article int(11) NOT NULL,
  category_id int(11) NOT NULL,
  price int(11) DEFAULT NULL,
  bisquit_id int(11) DEFAULT NULL,
  cream_id int(11) DEFAULT NULL,
  filling_id int(11) DEFAULT NULL,
  weight decimal(4, 2) DEFAULT NULL,
  tiers int(2) DEFAULT NULL,
  mousse_id int(11) DEFAULT NULL,
  cover varchar(255) DEFAULT NULL,
  form_id int(11) DEFAULT NULL,
  decorarion_id int(11) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 7,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `article` on table `product`
--
ALTER TABLE product
ADD UNIQUE INDEX article (article);

--
-- Create foreign key
--
ALTER TABLE product
ADD CONSTRAINT FK_product_bisquit_id FOREIGN KEY (bisquit_id)
REFERENCES bisquit (id) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE product
ADD CONSTRAINT FK_product_category_id FOREIGN KEY (category_id)
REFERENCES category (id) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE product
ADD CONSTRAINT FK_product_cream_id FOREIGN KEY (cream_id)
REFERENCES cream (id) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE product
ADD CONSTRAINT FK_product_decoration_id FOREIGN KEY (decorarion_id)
REFERENCES decoration (id) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE product
ADD CONSTRAINT FK_product_filling_id FOREIGN KEY (filling_id)
REFERENCES filling (id) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE product
ADD CONSTRAINT FK_product_form_id FOREIGN KEY (form_id)
REFERENCES form (id) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE product
ADD CONSTRAINT FK_product_mousse_id FOREIGN KEY (mousse_id)
REFERENCES mousse (id) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Create table `order_prod`
--
CREATE TABLE order_prod (
  id int(11) NOT NULL AUTO_INCREMENT,
  order_id int(11) NOT NULL,
  prod_id int(11) NOT NULL,
  quantity smallint(6) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 7,
AVG_ROW_LENGTH = 2730,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `UK_order_prod` on table `order_prod`
--
ALTER TABLE order_prod
ADD UNIQUE INDEX UK_order_prod (order_id, prod_id);

--
-- Create foreign key
--
ALTER TABLE order_prod
ADD CONSTRAINT FK_order_prod_order_id FOREIGN KEY (order_id)
REFERENCES `order` (id) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE order_prod
ADD CONSTRAINT FK_order_prod_product_id FOREIGN KEY (prod_id)
REFERENCES product (id) ON DELETE NO ACTION ON UPDATE NO ACTION;

DELIMITER $$

--
-- Create procedure `add_order`
--
CREATE PROCEDURE add_order (IN em varchar(255), IN deldate date, IN deltime time, IN deliver varchar(255), IN descript varchar(255), IN quant smallint, IN bis int, IN cream int, IN fil int, IN weight decimal, IN tiers int, IN form int, IN ber varchar(255), IN gin smallint, IN photo tinyint, IN cand tinyint, IN cat int)
DETERMINISTIC
BEGIN
  DECLARE ui int DEFAULT 0;
  DECLARE num int DEFAULT 0;
  DECLARE art int DEFAULT 0;
  DECLARE di int DEFAULT 0;
  DECLARE curdate date DEFAULT CURRENT_DATE();
  SET @st = 'В обработке';
  SELECT
    b.id INTO ui
  FROM user u
    LEFT JOIN buyer b
      ON u.id = b.user_id
  WHERE u.EMAIL = em;
  SELECT
    COUNT(*) INTO num
  FROM `order` o;
  SELECT
    COUNT(*) INTO art
  FROM product p;
  INSERT INTO `order` (number, status, buyer_id, order_date, delivery_date, delivery, delivery_time, description)
    VALUES (num + 1, @st, ui, curdate, deldate, deliver, deltime, descript);
  INSERT IGNORE INTO decoration (berries, gingerbread, photo, candies)
    VALUES (ber, gin, photo, cand);
  SELECT
    d.id INTO di
  FROM decoration d
  WHERE d.berries = ber
  AND d.gingerbread = gin
  AND d.photo = photo
  AND d.candies = cand;
  INSERT INTO product (article, category_id, bisquit_id, cream_id, filling_id, weight, tiers, form_id, decorarion_id)
    VALUES (art + 1, cat, bis, cream, fil, weight, tiers, form, di);
  INSERT INTO order_prod (order_id, prod_id, quantity)
    VALUES (num + 1, art + 1, quant);
END
$$

DELIMITER ;

--
-- Create view `order_info`
--
CREATE
VIEW order_info
AS
SELECT
  `order`.`number` AS `number`,
  `order`.`status` AS `status`,
  `b1`.`name` AS `buyer`,
  `b1`.`phone` AS `phone`,
  `order`.`order_date` AS `order_date`,
  `order`.`delivery_date` AS `delivery_date`,
  `order`.`delivery_time` AS `delivery_time`,
  `order`.`delivery` AS `delivery`,
  `order`.`description` AS `description`,
  `product`.`weight` AS `weight`,
  `product`.`tiers` AS `tiers`,
  `c1`.`name` AS `cat_name`,
  `b`.`name` AS `bis_name`,
  `c`.`name` AS `cr_name`,
  `f`.`name` AS `fil_name`,
  `f1`.`name` AS `form_name`,
  `d`.`gingerbread` AS `gingerbread`,
  `d`.`candies` AS `candies`,
  `d`.`photo` AS `photo`,
  `d`.`berries` AS `berries`
FROM (((((((((`order`
  LEFT JOIN `buyer` `b1`
    ON ((`order`.`buyer_id` = `b1`.`id`)))
  LEFT JOIN `order_prod`
    ON ((`order`.`id` = `order_prod`.`order_id`)))
  LEFT JOIN `product`
    ON ((`order_prod`.`prod_id` = `product`.`id`)))
  LEFT JOIN `category` `c1`
    ON ((`product`.`category_id` = `c1`.`id`)))
  LEFT JOIN `bisquit` `b`
    ON ((`product`.`bisquit_id` = `b`.`id`)))
  LEFT JOIN `cream` `c`
    ON ((`product`.`cream_id` = `c`.`id`)))
  LEFT JOIN `filling` `f`
    ON ((`product`.`filling_id` = `f`.`id`)))
  LEFT JOIN `form` `f1`
    ON ((`product`.`form_id` = `f1`.`id`)))
  LEFT JOIN `decoration` `d`
    ON ((`product`.`decorarion_id` = `d`.`id`)));

DELIMITER $$

--
-- Create procedure `find_orders`
--
CREATE PROCEDURE find_orders (IN em varchar(255))
BEGIN
  SELECT
    oi.number,
    oi.status,
    oi.buyer,
    oi.phone,
    oi.order_date,
    oi.delivery_date,
    oi.delivery_time,
    oi.delivery,
    oi.description,
    oi.weight,
    oi.tiers,
    oi.cat_name,
    oi.bis_name,
    oi.cr_name,
    oi.fil_name,
    oi.form_name,
    oi.gingerbread,
    oi.candies,
    oi.photo,
    oi.berries
  FROM order_info oi
    LEFT JOIN buyer b
      ON b.phone = oi.phone
    LEFT JOIN user u
      ON b.user_id = u.id
  WHERE u.email = em
  ORDER BY oi.number DESC;
END
$$

--
-- Create procedure `del_user`
--
CREATE PROCEDURE del_user (IN em varchar(255))
BEGIN
  DELETE
    FROM user
  WHERE user.email = em;
END
$$

--
-- Create procedure `add_admin`
--
CREATE PROCEDURE add_admin (IN em varchar(255), IN pa varchar(255), IN ph bigint, IN na varchar(255))
BEGIN
  DECLARE i int DEFAULT 0;
  INSERT INTO user (email, password)
    VALUES (em, pa);
  SELECT
    u.id INTO i
  FROM user u
  WHERE u.EMAIL = em;
  INSERT INTO admin (user_id, name, phone)
    VALUES (i, na, ph);
END
$$

--
-- Create function `is_user`
--
CREATE FUNCTION is_user (e varchar(255), p varchar(255))
RETURNS int(11)
BEGIN
  DECLARE result int DEFAULT 0;
  SELECT
    COUNT(*) INTO result
  FROM user u
  WHERE u.EMAIL = e
  AND u.PASSWORD = p;
  RETURN result;
END
$$

--
-- Create function `is_admin`
--
CREATE FUNCTION is_admin (e varchar(255))
RETURNS int(11)
BEGIN
  DECLARE result int DEFAULT 0;
  SELECT
    COUNT(*) INTO result
  FROM user u
    JOIN admin a
      ON u.id = a.user_id
  WHERE u.EMAIL = e;
  RETURN result;
END
$$

DELIMITER ;

-- 
-- Dumping data for table user
--
INSERT INTO user VALUES
(1, 'andreeva.d.a9@gmail.com', 'admin'),
(2, 'andreeva4.da@edu.spbstu.ru', 'jjjjjj'),
(6, 'darya310501@yandex.ru', 'd310501');

-- 
-- Dumping data for table mousse
--
INSERT INTO mousse VALUES
(5, 'Ванильный'),
(1, 'Крем-чиз'),
(4, 'Фруктовый'),
(2, 'Шоколадный'),
(3, 'Ягодный');

-- 
-- Dumping data for table form
--
INSERT INTO form VALUES
(4, 'Другая'),
(2, 'Квадратная'),
(1, 'Круглая'),
(3, 'Муссовая');

-- 
-- Dumping data for table filling
--
INSERT INTO filling VALUES
(3, 'Карамельная'),
(4, 'Ореховая'),
(6, 'Суфле'),
(2, 'Фруктовая'),
(5, 'Шоколадная'),
(1, 'Ягодная');

-- 
-- Dumping data for table decoration
--
INSERT INTO decoration VALUES
(1, 'Клубника', 2, 1, 1),
(4, 'Малина', 0, 0, 1),
(2, 'нет', 0, 1, 1),
(5, 'нет', 3, 1, 1),
(3, 'нет', 5, 1, 0);

-- 
-- Dumping data for table cream
--
INSERT INTO cream VALUES
(7, 'Ганаш'),
(4, 'Йогуртовый'),
(1, 'Крем-чиз'),
(3, 'Пломбир'),
(5, 'Сметанный'),
(6, 'Творожный'),
(2, 'Шоколадный');

-- 
-- Dumping data for table category
--
INSERT INTO category VALUES
(6, 'Другое'),
(5, 'Зефир'),
(3, 'Капкейк'),
(2, 'Муссовый торт'),
(1, 'Торт'),
(4, 'Чизкейк');

-- 
-- Dumping data for table bisquit
--
INSERT INTO bisquit VALUES
(1, 'Ванильный'),
(3, 'Красный бархат'),
(4, 'Маковый'),
(7, 'Медовый'),
(5, 'Морковный'),
(8, 'Фисташковый'),
(6, 'Фруктовый'),
(2, 'Шоколадный');

-- 
-- Dumping data for table buyer
--
INSERT INTO buyer VALUES
(1, 2, 'Даша', 79042240167),
(4, 6, 'Darya', 79999999999);

-- 
-- Dumping data for table product
--
INSERT INTO product VALUES
(1, 1, 1, NULL, 2, 1, 3, 5.00, 1, NULL, NULL, 2, 1),
(2, 2, 1, NULL, 4, 2, 5, 4.00, 1, NULL, NULL, 1, 2),
(3, 3, 1, NULL, 8, 3, 2, 7.00, 1, NULL, NULL, 1, 3),
(4, 4, 1, NULL, 6, 2, 4, 10.00, 2, NULL, NULL, 2, 4),
(5, 5, 1, NULL, 4, 5, 3, 12.00, 3, NULL, NULL, 1, 5),
(6, 6, 1, NULL, 2, 3, 3, 3.00, 1, NULL, NULL, 1, 2);

-- 
-- Dumping data for table `order`
--
INSERT INTO `order` VALUES
(1, 1, 'В обработке', 1, '2022-05-24', '2022-05-26', NULL, 'Харченко 16', '20:00:00', 'Хочу вкусный торт'),
(2, 2, 'В обработке', 1, '2022-05-24', '2022-05-28', NULL, 'Самовывоз (Коммунистическая д.70)', '20:00:00', 'Хочу еще торт'),
(3, 3, 'В обработке', 4, '2022-05-25', '2022-05-28', NULL, 'Самовывоз (Коммунистическая д.70)', '22:00:00', 'Описание какое-то очень длинное'),
(4, 4, 'В обработке', 1, '2022-05-23', '2022-05-31', NULL, 'Харченко 12', '22:00:00', 'здесь описание'),
(5, 5, 'В обработке', 4, '2022-05-23', '2022-05-31', NULL, 'Самовывоз (Коммунистическая д.70)', '22:00:00', ''),
(6, 6, 'В обработке', 4, '2022-05-22', '2022-05-31', NULL, 'Самовывоз (Коммунистическая д.70)', '22:00:00', 'yes');

-- 
-- Dumping data for table order_prod
--
INSERT INTO order_prod VALUES
(1, 1, 1, 1),
(2, 2, 2, 1),
(3, 3, 3, 2),
(4, 4, 4, 1),
(5, 5, 5, 1),
(6, 6, 6, 1);

-- 
-- Dumping data for table admin
--
INSERT INTO admin VALUES
(1, 1, 'Дарья', 79042371320);

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;